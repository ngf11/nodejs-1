https://www.youtube.com/watch?v=f2EqECiTBL8

//chapter 1

-- How does nodeJS deffer form vanilla JS
 - nodeJS runs on the server not the browser(Backend not the frontend),
 - the consol is now on the terminal window
 - there is a golbol object insted of a window object
 - has common core modules the we will explain.(these modules relate to the file system anD the OS).
 to import these we use commonJs modules insted of ES6 modules
 - nodeJS is missing some of the JS API's like fetch. we can always pull in packeges into nodeJS 


//chapter 1
// console.log(global);

//inport

const os = require("os");
const path = require("path");
const { dirname } = require("path");
//inport functions form another file
const math = require("./math");
//inport of function disconstracted
// const { add } = require("./math");
const { add, subtract, multiply, divide } = require("./math");
//constracted
console.log(math.add(2, 2));
//disctracted
console.log(add(5, 6));
console.log(subtract(5, 6));
console.log(divide(5, 6));
console.log(multiply(5, 6));

console.log(os.type());
console.log(os.release());
console.log(os.homedir());
console.log(__dirname);
console.log(__filename);

// console.log(path.dirname(__filename));
// console.log(path.basename(__filename));
// console.log(path.extname(__filename));

// console.log(path.parse(__filename));
// const pase = path.parse(__filename);


//chapter 2
//How to read files
// const fs = require("fs");

// fs.readFile("./file/started.txt", "utf8", (err, data) => {
//   if (err) throw err;
//   console.log(data);
//   // console.log(data.toString());s
// });
// consol.log(data) here gives you buffer data
//<Buffer 48 69 2c 20 6d 79 20 4e 61 6d 65 20 69 73 20 6e 69 63 6f 2e>
//to read the data here we use consol.log(data.toString())
//What we can also use before the call back fucntion. Is to add a parameter utf8
// fs.readFile("./file/started.txt", "utf8", (err, data) => {
//   if (err) throw err;
//   // console.log(data);
//   console.log(data.toString());
// });
//by adding the utf8 you can just consol.log(data)

// notice the throw error inside the if statment. If we get an uncought. we need to catch that
//exit on uncougth error
// process.on("uncaughtException", (err) => {
//   console.error(`There was an uncaught Error: ${err}`);
//   process.exit(1);
// });
// If we have an uncaught error. we chould exit. Here we lisenting to this uncaughtExcption with process. process is one of those vaules that node has. We do need to inport it. We lisent to an uncaughtExcption we pass in an error to the callback and we are login the error in the console "consol.error"
// the we exit the application with process.exit(1)
//lets throw an error by changing the file path. fs.readFile form ="./file/started.txt' to ./file/hello.txt" to throw an error
// fs.readFile("./file/hello.txt", "utf8", (err, data) => {
//   if (err) throw err;
//   console.log(data);
//   // console.log(data.toString());s
// });
// process.on("uncaughtException", (err) => {
//   console.error(`There was an uncaught Error: ${err}`);
//   process.exit(1);
// });
//console.error = There was an uncaught Error: Error: ENOENT: no such file or directory, open './file/hello.txt'.
// fs.readFile("./file/started.txt", "utf8", (err, data) => {
//   if (err) throw err;
//   console.log(data);
//   // console.log(data.toString());s
// });
// console.log("hello ..."); // we are adding this consol.log to demostrate that readFile and node in general. the fucntions and methods are asynchronous. we are loging the data in call back function consol.log(data) and consol.log("hello..."). What we are saying here is that node  will process fs.readFile("./file/started.txt", "utf8", (err, data){} and also do the rest of the code in this case the console.log("hello ...") and the rest of the program. so once imdone reading the file i will get that data to you. Let run this and see what we get in the console first. we will get the Helo... So node read the whole file first and the log the hello... and the fetch the dtata Hi my name is nico
// process.on("uncaughtException", (err) => {
//   console.error(`There was an uncaught Error: ${err}`);
//   process.exit(1);
// });

// Insted of hard coding the path to the file there is a better way.
// in order to that let use the const path = require('path)
// const fs = require("fs");
// const path = require("path");

// fs.readFile(
//   path.join(__dirname, "file", "started.txt"),
//   "utf8",
//   (err, data) => {
//     if (err) throw err;
//     console.log(data);
//     // console.log(data.toString());s
//   }
// );
// console.log("hello ...");

// if we use path.join(__dirname, "file", "started.txt"), is much better aproch then hard coding in the file path
// if we run this code everything will work.

// now that we know how to read a file. let right a file

// fs.writeFile(
//   path.join(__dirname, "file", "reply.txt"),
//   "Nice to meet you",
//   (err) => {
//     if (err) throw err;
//     console.log("Write Complete");
//   }
// );

// by coping the readFile and changing it to the writeFile--changing the file name any name. removing the 'utf8' because by default is 'utf8'-- then we add the mesege to the file in this case 'Nice to meet you' --the callback will only have an error not the data we ar not reading data. in the consol.log we are removing the data. and add in this case "Write Complete". we can save this and we can run this code.now the file replay.txt is created with text inside.
// now the file replay.txt is created.

// fs.appendFile(
//   path.join(__dirname, "file", "test.txt"),
//   "Testing Text",
//   (err) => {
//     if (err) throw err;
//     console.log("Append Complete");
//   }
// );

// we copy the write file. and changing it to appendFfile. Here we can add more content to an existent file or creat a new file. let change the reply.txt to test.txt/ to text.txt change the content "Testing Text". In the console.log("Append Completed"). Run the code.. alod here if we look at the terminal we cna see that the readFile finish last duo the asynchronous nature of node. Append file will modify an existing file  and can append content to it or creat a new file if it dosen't exist. Duo to the asynchronous nature of nodejs and these diferent methods we are calling
process.on("uncaughtException", (err) => {
  console.error(`There was an uncaught Error: ${err}`);
  process.exit(1);
});

// if we wanted to modify a file a file that we created. it will be better to put appendFile inside the callback of a write me file

// fs.writeFile(
//   path.join(__dirname, "file", "user.txt"),
//   "Hi, nico. Keep going",
//   (err) => {
//     if (err) throw err;
//     console.log("Write Complted");
//     fs.appendFile(
//       path.join(__dirname, "file", "user.txt"),
//       "\n\n You will get what you want",
//       (err) => {
//         if (err) throw err;
//         console.log("Append Completed");
//       }
//     );
//   }
// );
//By putting the the append inside of the writeFile we cna see that we created a new txt file and the text that we have creat is the write order.

// As you have imagin. If you want to add more content to this file user.txt after you created it and we wanted to make sure it hapened in the order that need it to, or renaming the file. This need to to happend in the callback of the append file. By this just copy the appendFile and add it inside the existing appenedFile with the additional text. change the append to rename
// fs.writeFile(
//   path.join(__dirname, "file", "user.txt"),
//   "Hi, nico. Keep going",
//   (err) => {
//     if (err) throw err;
//     console.log("Write Complted");
//     fs.appendFile(
//       path.join(__dirname, "file", "user.txt"),
//       "\n\n You will get what you want",
//       (err) => {
//         if (err) throw err;
//         console.log("Append Completed");

//         fs.rename(
//           path.join(__dirname, "file", "user.txt"),
//           (__dirname, "file", "Newuser.txt"),
//           (err) => {
//             if (err) throw err;
//             console.log("Rename Completed");
//           }
//         );
//       }
//     );
//   }
// );
// IN the rename we are grabing the pathe of the file (__dirname, "file", "user.txt"), insted of adding more text we are puting a path with the nex file name. change the console.log to rename complete.
// Now lets run this. If we look at ther terminal the output is:
// Hi, my Name is nico.
// Write Complete
// Append Completed
// Rename Completed
// it does happend in the order we expexted we have write, append, rename and you can see this time that "Hi, my Name is nico."  the read operation happend first. Agian asynchronous we dont know how these are going to happend. but by nesting the write, append, rename we can control the execution. Now by looking at this it looks like a callback hell. In vanilla javaScript we can use async await. Lets see how can we do this in Node.
// let switch the const fs to  const fsPromises = require(fs).promises
// now let creat a function const fileOps. For file opeerations this will be an async() function
// inside this function we can use try{}catch(){}
// to catch erros catch(err){consol.error(err)}.
// we can allso throw the error insed the catch with an if statment but the error is actully being cought inside the catch
//isnde of try{} we are going to define const data = await fsPromises.readfile()
//inside we need to specify the file pathfsPromises.readFile(path.join(__dirname, "file", "started.txt"),"utf8");  now that we have the data lets consol.log(data) inside try{}. Then lets call fileOps(); at the end and run the terminal
// now lets add another await inside of try await fsPromises
//now we will write a file. this file wil be a promise write. will add the same path but will change the file.txt name (__dirname.join("file", "promisewrite.txt")). After that we want to pass in the data that we just read (__dirname.join("file", "promisewrite.txt"), data). now let copy what we just wrote and append to the file.await fsPromises.appendFile(__dirname.join("file", "promisewrite.txt"),"Nice to meet you"); But this time we write our mesege wher the data is
// now lets copy and past. change the append to rename. Here insted of the text we are coping  the the file path  path.join(__dirname, "file", "started.txt") and pasting it to where data or message goes
//fsPromises.rename(__dirname.join("file", "promisewrite.txt"),path.join(__dirname, "file", "promiseComplet.txt"));
//what we are doing here is taking the data from the started  and we are writing a new file promisWrite .hen we are appending to the file. Then we are renaming the file
// now let copy and past at the end const data = await fsPromises.readFile(path.join(__dirname, "file", "started.txt"),"utf8");console.log(data); and change the  const data to const new data also change the name of the file "started.txt" to "promiseComplet.txt"
// as you can see we have different operations happenig her. we are  we are reding data from a file readFile. Then we are writing to a new file writefile "promisewritre.txt". Then we are appending text to that new file. Then we are renaming to that new file  the we are reading that new file and loggin the newData from that file. now run this in terminal/
//Hi, my Name is nico. (here we have the original content of the file )
// Hi, my Name is nico.
//here we have(the new file with the new content add)
// Nice, to meet you
// also we cabn see our new file promis completed.

// now let go bac and add one more thing let copy await fsPromises.writeFile(path.join(__dirname, "file", "promisewrite.txt"),data ); and paste above  the writeFile  and change the writeFile to unlink after that remove the data because unlink is a delete. we are deleting the orgin al file  that is called "Statrted.txt"
//Now we are reading the file. loging the data to the console. then delteing that file and the creating that new file.
//note** if we are rerunning it with the unlink delte promiseComplete.txt and run agian
//Now after runing this in the terminal. we have deleted the started text

const fsPromises = require("fs").promises;
const { fdatasync, writeFile } = require("fs");
const path = require("path");

const fileOps = async () => {
  try {
    const data = await fsPromises.readFile(
      path.join(__dirname, "file", "started.txt"),
      "utf8"
    );
    console.log(data);
    await fsPromises.unlink(path.join(__dirname, "file", "started.txt"), data);
    await fsPromises.writeFile(
      path.join(__dirname, "file", "promisewrite.txt"),
      data
    );
    await fsPromises.appendFile(
      path.join(__dirname, "file", "promisewrite.txt"),
      "\n\n Nice, to meet you"
    );
    await fsPromises.rename(
      path.join(__dirname, "file", "promisewrite.txt"),
      path.join(__dirname, "file", "promiseComplet.txt")
    );
    const newData = await fsPromises.readFile(
      path.join(__dirname, "file", "promiseComplet.txt"),
      "utf8"
    );
    console.log(newData);
  } catch (err) {
    console.error(err);
  }
};
fileOps();


// now we are going to create a new js file called stream.js

// if we have larger files some times is better not to grab all og the data at once. It could be too much; is like  moving a lage pile of sand bucket by bucket or removing the water of a pool bucket by bucket. lets make this easier on the application. lets get the file structure
// we are using the fs.createReadStream("./file/lorem.txt").
//But a better option will be to use the path option
// add { encoding: "utf8" } to rs

const fs = require("fs");
const rs = fs.createReadStream("./file/lorem.txt", { encoding: "utf8" });
// here we created a readeble stream and we specifity the coding

// now lets specify a writible stream.Now where  do we want to write this to let call it "new-lorem.txt". and we dont need to specify anything else form her. we already specify what was being read.
const ws = fs.createWriteStream("./file/new-lorem.txt");

// now that we have that. We need to lisent to the data coming in form the stream. let grab our readble stream rs.on()
// here we a re listing to the data tha is comming in
// rs.on("data", (dataChunk) => {
//   //here we can consol.log the dataChunk or we can write to our writible stream
//   ws.write(dataChunk);
// });
// // after we run this we have a new file new-lorem.txt
/*
this was an example on how to work on a larger file. In this case when you are wortking with a much larger file  this a more efficient way.
---
speaking of efficiency let fix this 
rs.on("data", (dataChunk) => {
 ws.write(dataChunk);
});
insted of using a listener use 
rs.pipe()
the pass to the witeble stream ws
piping is more efficiant 
** note - delete the new-lorem.txt and run it again
now we have the new-lorem.txt 
*/
rs.pipe(ws);

// let creat a new js file dri.js

/* 
dir is refering to directory.
let go ahead and defin fs
*/
const fs = require("fs");
/* 
after we get our file stream let creat a directory by using fs.mkdir.which stands for make directory. let call this directoy new fs.mkdir("./new")

then there is a call back with an error
fs.mkdir("./new", (err)=>{
    if(err) throw err
    console.log("Direcory created")
})
let save and run it on the terminals
*/
/*
fs.mkdir("./new", (err) => {
  if (err) throw err;
  console.log("Directory created");
});
*/

/* 
Earlier we threw an error on purpose becuase we apttempted to read file that didi not exist.
we can check if a file and directories exist or not. so we dont get those errors. Also we want to check is this regard  if the directory already exist. let not created because we dont want to re write  what we already have
In this case let use the exist sync method 
here if(!fs.existsSync('./new')) we are sying if the  "new" dir dose not exit {fs.mkdir("./new", (err) => {
  if (err) throw err;
  console.log("Directory created");}
*/
if (!fs.existsSync("./new")) {
  fs.mkdir("./new", (err) => {
    if (err) throw err;
    console.log("Directory created");
  });
}
// now if we were to creat a direcory agian. It will not created. It already exist. If we delete the new directoy and run the code agian it will created again becuase it did not exist.  You might find checking for file existance fairly useful before you attept to delete a file if it exixt or not. Or of you attempt to re name a file or copy a file. you wan to make sure the file exist. Like wise you want to check directories in this regard

/* now lets write some code that deletes direcories.
let copy this down 
if (!fs.existsSync("./new")) {
  fs.mkdir("./new", (err) => {
    if (err) throw err;
    console.log("Directory created");
  });
  remove the ! NOT 
  and insted of mkdir change it to remove rmdir
  change the conosl.log to "Directory remove"
}

*/
if (fs.existsSync("./new")) {
  fs.rmdir("./new", (err) => {
    if (err) throw err;
    console.log("Directory removed");
  });
}
// if we run this it will add the directoy and remove it. we won't see the new directory but both operations will run


// chapter 3

we are going to learn about node packege manager also know as npm. when you install node you also install npm. also npm has it own site and documentation. npm provides packeges for us to use in our applications. Developer creat re usable moduals and share the through npm insted of recrating the wheel. we can look a  modual that already exist and we can inport that modual into our application 

if we go to the documentation in npm we usally developer we use CLI npm. CLI stands for command line interface. CLI is what developer use when we are intergrading npm into a project 

they are npm commands that are essential:
// lets start up by doing a consol.log("testing"). Lets instally a global npm packege. that we can just call for the command line with adding it to a specific project.  Let type "npm install" or you can use  "npm i". We are going to add "npm i nodemon" this is a great developer packege but is also good to install it globaly. With "npm i nodemon" we want to add -g
// nodemon does it monotors your files. so everytime you save it restarts the server so we are not always typing node and the file name
//let run it and the run nodemon on the terminal. if you have multile files you need run nodemon + filename.js to switch files. but by default it will watch index.js. so if we change the consol.log it and the save it will automaticlly change in the terminal. now to exit nodemon just press ctl+c
// console.log("testing!! Nico F baby");
/*
 now that you know how to install a package globally now lets add a package to our project. but before we do that we have to initiolise npm by using "npm init" 
 now it will ask you some questions if we want to skip these quetions run the command "npm init -y" y for yes
 but..
  lets just run the "npm init" to look at the questions.
  the packged name: by (tut3) what we name the floder PRESS Enter
  version:(1.0.0) press enter
  description: (you dont have to enter one)
  entry point: (index.js) by defualt. but we can change it to any file name that will be using 
  test command: optional**
  git repository: enter your git repo
  keywords: no keywords
  author: you can put your name for author.
  license: by default

  now if we go to our file tree we see a package.json file this just has the awnser of the questions.
  the pacckage.json file is what npm reads to know what packeges to install for your projects.  this file will stay with your repo if we send to our github. but we wont be sending the packages themselves. in that way we dont have to send or store that much data. if someone forks, clones, or install your project it can read package.json file.

  or like wise if we were to host this wibsite and bulit the app and run a bulit command. it will install those packges there with having to trasnfer them form github.

  so now that we have this.
  lets add a package to our program
  npm i date-fns
  which stands for date functions.
  it will install this package as a dependecy which we will see in our package.jason file
 now we  "dependencies": {
    "date-fns": "^2.30.0"
  }
  in the package.json
  this are production dependecies  listed here
  so when the project would bulit with bulit command it will include this package; because we will know it will be part of the over all application  that need  to go into production
   but we can also have dev dependecies. before we look there 
   
   let look at the package-lock.json that we have now 
   we dont wnat to change anythis there that is handel by npm
   we only use package.json

   we also wee node modules
    and this folder can get failr large
     this beacse any dependecies that we add can also pull other depedecies  and if this package needs all of this the depedecies  the file will get fairly big
     what we want to do is creat a .gitignore file and add "node_modules" to ignore these big files 

     now if we were to npn init this 

     in case you clone an repo and it has the package.jason file but not the node_modules file just run
     npm install 
     in the terminal.

     lets remove the console.log(testing).
     
     now let import format from "date-fns" using common js
*/
// const { format } = require("date-fns");
//now that we import it let use another consol.log
// console.log(format(new Date(), "yyyyMMdd\tHH:MM:ss"));
// here we are calling the format function from date-fns. This acepts a new Date() after it acepts a new Date() we have to tell it how we wan to format it, and we will use in a log format as we learn about events. Remember you are not running nodemon. let go and add node mon as a dev package. Back in package jason lets go and add a dev dependecy. easly we can run nodemon and a globol dependecy form the terminal because we already install it. But we are  here going to add manually in the package.jason file

// we are going to run "npm i nodemon --save-dev" or a short cut version of "npm i -D" this will run nodemon as a dev dependciy. now run it. if we look at our package.jason file we will see the devdpendecit with devmon.

//lets talk about scripts and how to run our application using scripts becuase thats what a server will use if we were to host it somewhere. we will usally see a start script a dev script and a buit script

// so let go into our package.json file and under scripts let add "start": "node index" becuase this were we want to run our project with

//let change the test script to dev
//"test": "echo \"Error: no test specified\" && exit 1" to
// "dev": "nodemon index" becuase is file our aplication is running in but reeber it default into index js anyway

// now if we were to start the projects by usinig
//"npm start"
//start is one of the few words that can be run with out dev
// but what we are going to use is  "npm run dev"
// now if look at the  the terminal we can see that nodemon is running everytime we save it refreshes the terminal so if were at add another console.log() it will be mirro in the terminal
// we are go ahead and exit out of nodemon with ctl+c beacuse going to add another depedecy

// this is  a production dependecy so we dont put a falg after it it will go directly to the dependecies
// "npm i uuid" it allows us to generate id's that are diferent for each time
// we can see "uuid" now we have to import it at the top
// now this is a little different. with es6 imports we will use for uuid we want to import it as  version {v4:uuid}. You may also see it at {v4} or const uuid = require("uuid") and is the code they will use it as consol.log(uuid.v4)
// but we are going to use
//const { v4: uuid } = require("uuid"); and call it consol.log(uuid())
//this will genarate an new id
// now once agian im going to run in terminal npm run dev to start nodemon

const { format } = require("date-fns");
const { v4: uuid } = require("uuid");
console.log(format(new Date(), "yyyyMMdd\tHH:MM:ss"));
console.log(uuid());

// now we can see in the termianl that we have the date  and uuid generated and if we do any changes it will genarate a new id. This could be really useful if we were to log such as an event, error, request. That we might write to a log file.
// you can search for this packges in npm website
// now lets take look at the package.json theres a little more detail we need to look at. if look at a t the packages we installed under dependecis or dev depedecies  we get the sematic version numberes ie. "uuid": "^9.0.0"
// the first number means a majore version
// the scond number means a minor versio
// the third number means a patch
// the ^ means allow an update to the minor version and the patch if needed
// if we have ~ at the begingin this means go ahead and update a patch version but do not update a minor version
// if we remove all the number and left a "*" go ahead and update everythig all the time. this is not too safe all though you might see it
// is also good to know that when istall a package you can also istall a specific version ie. "npm i uuid@9.0.0" this will install this specific verison. when you istall any package it will it will istal the laest package but it will not ^ but it will not istall any major updates just minors and patches.

// if you wanted to check for updates you can run "npm update" and this will cheack for any updates in your packages

// if we need to unistall anythig we can use
//"npm unistall" "npm un " "npm rm"
// in this case we can use "npm rm nodemon" but nodemon sice it is a devdependeciy you need to add the -D flag "npm rm nodemon -D"
// if will look at the script{} in dev it will not remove the nodemon index you will have to do it your self. but it will remove it form  the devdependecies{}.so if we remove a package it does not remove it from your script. You will have to do it manually.
 
 // chapter 4 

 // lets start up by doing a consol.log("testing"). Lets instally a global npm packege. that we can just call for the command line with adding it to a specific project.  Let type "npm install" or you can use  "npm i". We are going to add "npm i nodemon" this is a great developer packege but is also good to install it globaly. With "npm i nodemon" we want to add -g
// nodemon does it monotors your files. so everytime you save it restarts the server so we are not always typing node and the file name
//let run it and the run nodemon on the terminal. if you have multile files you need run nodemon + filename.js to switch files. but by default it will watch index.js. so if we change the consol.log it and the save it will automaticlly change in the terminal. now to exit nodemon just press ctl+c
// console.log("testing!! Nico F baby");
/*
 now that you know how to install a package globally now lets add a package to our project. but before we do that we have to initiolise npm by using "npm init" 
 now it will ask you some questions if we want to skip these quetions run the command "npm init -y" y for yes
 but..
  lets just run the "npm init" to look at the questions.
  the packged name: by (tut3) what we name the floder PRESS Enter
  version:(1.0.0) press enter
  description: (you dont have to enter one)
  entry point: (index.js) by defualt. but we can change it to any file name that will be using 
  test command: optional**
  git repository: enter your git repo
  keywords: no keywords
  author: you can put your name for author.
  license: by default

  now if we go to our file tree we see a package.json file this just has the awnser of the questions.
  the pacckage.json file is what npm reads to know what packeges to install for your projects.  this file will stay with your repo if we send to our github. but we wont be sending the packages themselves. in that way we dont have to send or store that much data. if someone forks, clones, or install your project it can read package.json file.

  or like wise if we were to host this wibsite and bulit the app and run a bulit command. it will install those packges there with having to trasnfer them form github.

  so now that we have this.
  lets add a package to our program
  npm i date-fns
  which stands for date functions.
  it will install this package as a dependecy which we will see in our package.jason file
 now we  "dependencies": {
    "date-fns": "^2.30.0"
  }
  in the package.json
  this are production dependecies  listed here
  so when the project would bulit with bulit command it will include this package; because we will know it will be part of the over all application  that need  to go into production
   but we can also have dev dependecies. before we look there 
   
   let look at the package-lock.json that we have now 
   we dont wnat to change anythis there that is handel by npm
   we only use package.json

   we also wee node modules
    and this folder can get failr large
     this beacse any dependecies that we add can also pull other depedecies  and if this package needs all of this the depedecies  the file will get fairly big
     what we want to do is creat a .gitignore file and add "node_modules" to ignore these big files 

     now if we were to npn init this 

     in case you clone an repo and it has the package.jason file but not the node_modules file just run
     npm install 
     in the terminal.

     lets remove the console.log(testing).
     
     now let import format from "date-fns" using common js
*/
// const { format } = require("date-fns");
//now that we import it let use another consol.log
// console.log(format(new Date(), "yyyyMMdd\tHH:MM:ss"));
// here we are calling the format function from date-fns. This acepts a new Date() after it acepts a new Date() we have to tell it how we wan to format it, and we will use in a log format as we learn about events. Remember you are not running nodemon. let go and add node mon as a dev package. Back in package jason lets go and add a dev dependecy. easly we can run nodemon and a globol dependecy form the terminal because we already install it. But we are  here going to add manually in the package.jason file

// we are going to run "npm i nodemon --save-dev" or a short cut version of "npm i -D" this will run nodemon as a dev dependciy. now run it. if we look at our package.jason file we will see the devdpendecit with devmon.

//lets talk about scripts and how to run our application using scripts becuase thats what a server will use if we were to host it somewhere. we will usally see a start script a dev script and a buit script

// so let go into our package.json file and under scripts let add "start": "node index" becuase this were we want to run our project with

//let change the test script to dev
//"test": "echo \"Error: no test specified\" && exit 1" to
// "dev": "nodemon index" becuase is file our aplication is running in but reeber it default into index js anyway

// now if we were to start the projects by usinig
//"npm start"
//start is one of the few words that can be run with out dev
// but what we are going to use is  "npm run dev"
// now if look at the  the terminal we can see that nodemon is running everytime we save it refreshes the terminal so if were at add another console.log() it will be mirro in the terminal
// we are go ahead and exit out of nodemon with ctl+c beacuse going to add another depedecy

// this is  a production dependecy so we dont put a falg after it it will go directly to the dependecies
// "npm i uuid" it allows us to generate id's that are diferent for each time
// we can see "uuid" now we have to import it at the top
// now this is a little different. with es6 imports we will use for uuid we want to import it as  version {v4:uuid}. You may also see it at {v4} or const uuid = require("uuid") and is the code they will use it as consol.log(uuid.v4)
// but we are going to use
//const { v4: uuid } = require("uuid"); and call it consol.log(uuid())
//this will genarate an new id
// now once agian im going to run in terminal npm run dev to start nodemon

// const { format } = require("date-fns");
// const { v4: uuid } = require("uuid");
// console.log(format(new Date(), "yyyyMMdd\tHH:MM:ss"));
// console.log(uuid());

// now we can see in the termianl that we have the date  and uuid generated and if we do any changes it will genarate a new id. This could be really useful if we were to log such as an event, error, request. That we might write to a log file.
// you can search for this packges in npm website
// now lets take look at the package.json theres a little more detail we need to look at. if look at a t the packages we installed under dependecis or dev depedecies  we get the sematic version numberes ie. "uuid": "^9.0.0"
// the first number means a majore version
// the scond number means a minor versio
// the third number means a patch
// the ^ means allow an update to the minor version and the patch if needed
// if we have ~ at the begingin this means go ahead and update a patch version but do not update a minor version
// if we remove all the number and left a "*" go ahead and update everythig all the time. this is not too safe all though you might see it
// is also good to know that when istall a package you can also istall a specific version ie. "npm i uuid@9.0.0" this will install this specific verison. when you istall any package it will it will istal the laest package but it will not ^ but it will not istall any major updates just minors and patches.

// if you wanted to check for updates you can run "npm update" and this will cheack for any updates in your packages

// if we need to unistall anythig we can use
//"npm unistall" "npm un " "npm rm"
// in this case we can use "npm rm nodemon" but nodemon sice it is a devdependeciy you need to add the -D flag "npm rm nodemon -D"
// if will look at the script{} in dev it will not remove the nodemon index you will have to do it your self. but it will remove it form  the devdependecies{}.so if we remove a package it does not remove it from your script. You will have to do it manually

// chapter 4
// in this chapter we will be learning about events common core module. "event Emitter". More spciclly how emmit custom events and how to respond to thoso events when they are admitted.
// we are going to change the Js file name to log events  and we are going to make this into a modual that we import an index.js file that we have created yet
const { format } = require("date-fns");
const { v4: uuid } = require("uuid");
// we are going to need are going to need both of those imports formart and uuid. Now we are going to creat a make a loggin function. Logging events is very usfull on a server.
const fs = require("fs");
const fsPromises = require("fs").promises;
const path = require("path");
const { loadavg } = require("os");
//Import the fs module, fsPromises, and path. We dont need any npm packese for these because the are core modules

// lets defiend or log events functions. Is going to be an async fucntion that is going to recive a message
const logevent = async (message) => {
  // inside we need to define date time by using the console log date-fns fucntion we used. inside of a tamplate litteral `${}`
  //then we are going to have another defenition called const logitem another tamplate litteral `${dateTime}\t{uuid()}` we call on the uuid() to get a unique id for each log event then one more tab \t ${messege}
  // now that we have the log item lets log that to the console. then we need a try{}catch{} block to get to the async await porsion of this
  const dateTime = `${format(new Date(), "yyyyMMdd\tHH:MM:ss")}`;
  const logitem = `${dateTime}\t${uuid()}\t${message}\n`;
  console.log(logitem);
  try {
    // here we await fsPromises and appendFile or creat a file if it does not exist-- then we use path.join(__driname,) we are creating a new "logs" directory. Inside of the directory we creat a "eventsLog.txt" file and we want the logTime to be log in there. we can save this much. There could be something that could cause an error. But we will leave it like this to see what will cause an error.
    if (!fs.existsSync(path.join(__dirname, "logs", "eventsLog.txt"))) {
      await fsPromises.mkdir(path.join(__dirname, "logs"));
    } //here we are checking if the directory dosent exist if it doesent create it
    await fsPromises.appendFile(
      path.join(__dirname, "logs", "eventsLog.txt"),
      logitem
    );
  } catch (err) {
    //here we catch an erro if an erro happens
    console.log(err);
  }
};
// here we are exporting our log events function and we are going to use it on the index.js we are going to creat
module.exports = logevent;
// creat an index.js file

// in here lets define logEvents set it equels to requier() inside of the () "./logEvents" js file
const logEvents = require("./logEvents");

// now we are ready to work with the events. What we want to do is defind an event emitter lets set this equals to require("eventes")3
//note** "events" is a common core module

const eventEmiter = require("events");

// after that we need to define a classs MyEmitter extends eventEmitter{} leave the {} empty. note** This looks starge but it is from the nodejs docs
class MyEmitter extends eventEmiter {}

// from here we can initialize the object that we are going to create
const myEmitter = new MyEmitter();

//add a listener for the log event by using .on()
//.on() is how we lisent to an event. we are goign to use a "log" event, the we pass an anonymous function (msg) message. Inside of this fucntion we will call logevents and once agian send that message
myEmitter.on("log", (msg) => logEvents(msg));

// Now that we are listing to the log event  we need to omit the event to test this out. We want to set a time out to let us undersatnd how everything is proceses. That hopefully will let us understand how everything is proceses. note** we dont have to set a time out 2 second = 2000
setTimeout(() => {
  //Emmit the event. once agian we use myEmitter.emit not on. on is listing .emit is emitting. we are going to emit the 'log' event, then we pass the message. now after the closing } add a delay
  myEmitter.emit("log", "Log event emitted!");
}, 2000);

// open a terminal and run npn run dev to launch nodemon
/*
now this will gives us an error 

it does still give us a want we want to log 
20230831        10:08:50        56d287eb-7402-47be-af37-24cac689eae3    Log event emitted!
but we  haven created our file with logs/eventsLog.txt
[Error: ENOENT: no such file or directory, open '/Users/nicolasfuentes/nodejs-1/tut3/logs/eventsLog.txt'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/Users/nicolasfuentes/nodejs-1/tut3/logs/eventsLog.txt'
  we need to modify the try block in logEvents.js
  by adding this the try block:
   if (!fs.existsSync(path.join(__dirname, "logs", "eventsLog.txt"))) {
      await fsPromises.mkdir(path.join(__dirname, "logs"));
    } 
    the error will despear 

*/
// Now if we run it in the terminal we iwll get the log floder and eventLog.txt file. if we runthis agian we shoudl make a change to the file and any changes even a comment will log an event
// this is how you creat a web emmiter. When we creat a web server we will want to summit event to what request came in. so we have some details on the activiti of our web server.

//chapter 5